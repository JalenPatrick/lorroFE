{"version":3,"file":"static/development/pages/results.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Fonts.js","webpack:///./components/Header.js","webpack:///./components/Layout.js","webpack:///./pages/results.js","webpack:///./pages/script-1.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@material-ui/core\"","webpack:///external \"@material-ui/core/AppBar\"","webpack:///external \"@material-ui/core/Button\"","webpack:///external \"@material-ui/core/Card\"","webpack:///external \"@material-ui/core/CardActionArea\"","webpack:///external \"@material-ui/core/CardActions\"","webpack:///external \"@material-ui/core/CardMedia\"","webpack:///external \"@material-ui/core/CircularProgress\"","webpack:///external \"@material-ui/core/CssBaseline\"","webpack:///external \"@material-ui/core/ExpansionPanel\"","webpack:///external \"@material-ui/core/ExpansionPanelDetails\"","webpack:///external \"@material-ui/core/ExpansionPanelSummary\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/LinearProgress\"","webpack:///external \"@material-ui/core/Paper\"","webpack:///external \"@material-ui/core/Toolbar\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"@material-ui/icons/ExpandMore\"","webpack:///external \"axios\"","webpack:///external \"http\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-dom\"","webpack:///external \"react-particles-js\"","webpack:///external \"recharts\"","webpack:///external \"victory\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Fonts = () => (\n  <div>\n    <link href=\"https://fonts.googleapis.com/css?family=Srisakdi:700\" rel=\"stylesheet\"/>\n    <link href=\"https://fonts.googleapis.com/css?family=Permanent+Marker\" rel=\"stylesheet\"/>\n    <link href=\"https://fonts.googleapis.com/css?family=Merienda\" rel=\"stylesheet\"/>\n    <link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\"/>\n    <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"/>\n    <script src=\"https://cdn.WebRTC-Experiment.com/RecordRTC.js\"/>\n  </div>\n)\n\nexport default Fonts","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Link from 'next/link'\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Fonts from '../components/Fonts'\n\n\nconst styles = {\n    marginLeft: 10\n}\n\nconst Header = () => (\n    <div>\n        <Fonts/>\n        <AppBar position=\"static\" color=\"primary\">\n            <Toolbar>\n                <Link href=\"../\">\n                    <Typography variant=\"h5\" color=\"inherit\" gutterBottom style={{fontFamily:'Merienda'}}>\n                        Lorro\n                    </Typography>\n                </Link>\n            </Toolbar>\n        </AppBar>\n    </div>\n)\n\nexport default Header","import Header from './Header'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Link from 'next/link'\n\nconst layoutStyle = {\n    margin: 20,\n    padding: 20,\n    border: '1px solid #DDD'\n}\n\nconst Layout = (props) => (\n    <CssBaseline>\n        <Header />\n        <div>\n            {props.children}\n        </div>\n    </CssBaseline>\n)\n\nexport default Layout","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport {start, parseFile} from './script-1';\nimport { Typography, ButtonBase, DialogTitle, CardContent, CardHeader, Button } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport Particles from 'react-particles-js';\n\nimport Fonts from '../components/Fonts'\nimport { \n    AreaChart,\n    Area,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    ResponsiveContainer,\n    Label,\n    Radar,\n    RadarChart,\n    PolarGrid,\n    PolarAngleAxis,\n    PolarRadiusAxis\n} from 'recharts';\n\n// var fs = require('fs')\nimport * as V from 'victory';\nimport axios from 'axios'\n\n\nconst yourCard = {\n    borderTop: \"5px solid #0097a7\",\n    borderRadius: \"5px\"\n}\n\nconst sampleCard = {\n    borderTop: \"5px solid #ec407a\",\n    borderRadius: \"5px\",\n    margin: \"5vh 0 5vh 0\",\n}\n\nconst scoreCard = {\n    border: \"5px solid #ec407a\",\n    borderRadius: \"5px\",\n    margin: \"5vh 0 5vh 0\",\n    // width: \"50%\"\n}\n\nconst targetCard = {\n    border: \"5px solid #81C784\",\n    borderRadius: \"5px\",\n    margin: \"5vh 0 5vh 0\",\n    // width: \"50%\"\n}\n\nconst loadingStyle = {\n    textAlign: \"center\",\n    backgroundColor: \"#475372\",\n    height: 'auto'\n}\n\nconst displayStyle = {\n    textAlign: \"center\",\n    marginTop:'-10',\n    backgroundColor: \"#e0e0e0\",\n    height: 'auto'\n}\n\nconst wrap = {\n    overflowWrap: \"break-word\",\n    wordWrap: \"break-word\"\n}\n\nclass results extends Component {\n    constructor() {\n        super()\n        this.state = {\n            isLoading: true,\n            rawPhonemes: null,\n            segmentedPhonemes: null,\n            noteProgression: null,\n            frequencies: null\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({isLoading: true})\n        // console.log(this.props)\n        // console.log(window.location.search)\n        const process_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/process\"\n        const transcribe_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/transcribe\"\n        \n        // get file name from query param\n        const test = new URLSearchParams(window.location.search)\n        const tar = test.get('target');\n        const file = test.get('file')\n\n        // const target\n\n        const sendObj = {\n            file: file,\n            target: tar\n        }\n\n        const stringfied = JSON.stringify(sendObj)\n        // console.log('results', JSON.stringify(sendObj))\n        \n        // get info from backend and take what we need\n        await axios.post(process_url, stringfied).then(response => {\n            // console.log('result -', response)\n            // console.log('post success - result')\n            const sampleData = response.data.sample_data\n            const targetData = response.data.target_data\n            const res = response.data\n            console.log(res)\n            // this is the key used to transcribe the words the user said\n\n            this.setState({\n                isLoading: false,\n                procResponse: response.data,\n                rawPhonemes: sampleData.segmented_phonemes,\n                segmentedPhonemes: sampleData.backend_decoded,\n                noteProgression: sampleData.note_progression,\n                frequencies: sampleData.fundamental_frequencies,\n                t_rawPhonemes: targetData.segmented_phonemes,\n                t_segmentedPhonemes: targetData.backend_decoded,\n                t_noteProgression: targetData.note_progression,\n                t_frequencies: targetData.fundamental_frequencies,\n                wordCompare: res.compare_transcribe,\n                freqScore: res.freq_diff_score,\n                ppAccuracyScore: res.postprocessed_accuracy_score,\n                rawAccuracyScore: res.raw_accuracy_score,\n                displaySample: true,\n                transcribe: res.transcribe,\n                transcribeDone: false,\n                transcribeHere: null,\n                transcribeTextSample: null,\n                getTranscribeDone: false,\n                postTiming: null,\n                wordScore: null,\n                pacingScore: null\n            })\n            // console.log(this.state)\n        })\n    }\n\n    getFreqData = (freqArray, phonemeArray, notesArray) => {\n        // console.log(freqArray)\n        // console.log(phonemeArray)\n        // console.log(notesArray)\n        let dataArray = []\n\n        if (freqArray && phonemeArray && notesArray)\n            for (let i = 0; i < freqArray.length; i++) {\n                let dataObject = {\n                    freq: Math.round(freqArray[i]),\n                    phoneme: phonemeArray[i],\n                    note: notesArray[i]\n                }\n                dataArray.push(dataObject)\n            }\n        // console.log(dataArray)\n        if (dataArray) {\n            return dataArray;\n        } else {\n            getFreqData(freqArray, phonemeArray, notesArray);\n        }\n        \n    }\n\n    // used to contruct the radial plot which displays the users accuracy to the target sample\n    // based on 3 main fields\n    // 1. Pitch --> average spoken word frequency over the sample\n    // 2. Word Accuracy --> how correct the words are (use confidence from AWS)\n    // 3. Timing --> raw duration of the samples\n    getCompareData = (freq, timing, phonemes, words) => {\n        console.log(\"TIMING\")\n        console.log(timing)\n\n        const pitchObject = {\n            category: \"Pitch Matching\",\n            value: Math.round(freq),\n            fullMark: 100 \n        }\n\n        const wordAccuracyObject = {\n            category: \"Word Matching\",\n            value: Math.round(words),\n            fullMark: 100 \n        }\n\n        const phonemeAccuracyObject = {\n            category: \"Phoneme Matching\",\n            value: Math.round(phonemes),\n            fullMark: 100 \n        }\n        \n        const timingObject = {\n            category: \"Timing Matching\",\n            value: Math.round(timing),\n            fullMark: 100 \n        }\n\n        const dataArray = [pitchObject, wordAccuracyObject, phonemeAccuracyObject, timingObject]\n        return dataArray;\n    }\n\n    generateScore = (freq, timing, phonemes) => {\n        // console.log('gen score', ((freq + timing + phonemes + 90)/4).toFixed(2))\n        return ((freq + timing + phonemes + 80)/4).toFixed(2);\n    }\n\n    generateScore2 = (freq, timing, phonemes, words) => {\n        console.log('gs2', freq, timing, phonemes, words)\n        // console.log('gen score 2', ((freq + timing + phonemes + words * 100)/4).toFixed(2))\n        return ((freq + timing + phonemes + words)/4).toFixed(2);\n    }\n\n    wordMatching = (raw) => {\n        console.log(raw)\n        if (raw) {\n            const interpreted = raw.results.transcripts[0].transcript;\n            // this.setState({transcribeTextTarget: interpreted})\n            return interpreted;\n        }     \n    }\n\n    playTarget = (target_url) => {\n        const audio = new Audio(target_url);\n        audio.play();\n        // console.log(target_url);\n    }\n\n    toggleData = () => {\n        const newDataShow = !this.state.displaySample;\n        this.setState({displaySample: newDataShow});\n    }\n\n    postTranscribe = () => {\n        const transcribe_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/transcribe\"\n        const proc_response = this.state.procResponse\n        let result_url;\n        // console.log(this.state.transcribeDone)\n        if (!this.state.transcribeDone) {\n            axios.post(transcribe_url, JSON.stringify(proc_response)).then(response => {\n                // console.log('transcribe res: ', response);\n                if (response.data.status === 'COMPLETED') {\n                    response = response.data;\n                    console.log('done transcribe!', response)\n                    this.setState({\n                        transcribeDone: true, \n                        transcribeTextSample: response.content.results.transcripts[0].transcript,\n                        wordScore: response.word_accuracy.confidence_correct,\n                        pacingScore: (response.pacing.general_score +  response.pacing.word_score)/2,\n                        getTranscribeDone: true,\n                    })\n                    console.log('post call state', this.state)\n                }\n            })\n        }\n        \n        setTimeout(this.postTranscribe, 8000);\n        return result_url\n    }\n    \n    // getTranscribe = (trans_url) => {\n    //     // console.log('get transcribe', trans_url);\n    //     if(!this.state.getTranscribeDone) {\n    //         axios.get(trans_url).then(response => {\n    //             // console.log(response)\n    //             let result = response.data.results.transcripts[0].transcript;\n    //             let timing = response.data\n    //             console.log(timing)\n\n    //             this.setState({\n    //                 transcribeTextSample: result, \n    //                 getTranscribeDone: true,\n    //                 // postTiming: \n    //             })\n\n    //             // console.log('after getTranscribe', this.state)\n    //             return result\n    //         })\n    //     }\n    // }\n\n    matchingWords = (targetWords, sampleWords) => {\n        // console.log('matching words')\n        // console.log(targetWords, sampleWords)\n        if (this.state.transcribeTextSample) {\n            const sampleArray = (this.state.transcribeTextSample).split(' ');\n            const targetArray = (targetWords).split(' ');\n            // console.log(sampleArray, targetArray)\n            const intersect = targetArray.filter(value => sampleArray.includes(value))\n            // console.log(intersect)\n            // console.log(intersect.length, targetArray.length)\n            if (sampleArray.length > targetArray.length) {\n                return intersect.length / sampleArray.length;\n            } else {\n                return intersect.length / targetArray.length;\n            }\n        }\n    }\n\n    render() {\n    const isLoading = this.state.isLoading\n    const freqSampleData = this.getFreqData(this.state.frequencies, this.state.rawPhonemes, this.state.noteProgression)\n    const freqTargetData = this.getFreqData(this.state.t_frequencies, this.state.t_rawPhonemes, this.state.t_noteProgression)\n    const wordMatching = this.wordMatching(this.state.wordCompare);\n    // generateScore = (freq, timing, phonemes) => {\n    const lorroScore = this.generateScore(this.state.freqScore, this.state.ppAccuracyScore, this.state.rawAccuracyScore)\n    let transcribe_link;\n    let transcribe_result = null;\n    let determineWords = null;\n\n    if (!this.state.transcribeDone) {\n        transcribe_link = this.postTranscribe()\n    }\n    \n\n    let lorroScoreRedux = null;\n\n    determineWords = this.matchingWords(wordMatching, this.state.transcribeTextSample);\n    // generateScore2 = (freq, timing, phonemes, words) => {\n    lorroScoreRedux = this.generateScore2(this.state.freqScore, this.state.pacingScore, this.state.rawAccuracyScore, this.state.wordScore)\n    let compareGraphData = this.getCompareData(this.state.freqScore, this.state.pacingScore || this.state.ppAccuracyScore, this.state.rawAccuracyScore, this.state.wordScore || 80)\n    // console.log(transcribe_result, determineWords, lorroScoreRedux)\n\n    // compareGraphData = this.getCompareData(this.state.freqScore, this.state.ppAccuracyScore, this.state.rawAccuracyScore, determineWords)\n\n    // console.log(determineWords)\n\n    const test = new URLSearchParams(window.location.search)\n    const tar = test.get('target');\n    const file = test.get('file');\n\n    // console.log(tar, file);\n\n    const target_url = 'https://s3.us-east-2.amazonaws.com/lorro/' + tar + '.wav';\n    const sample_url = 'https://s3.us-east-2.amazonaws.com/lorro/' + file;\n    // console.log(sample_url, target_url)\n    \n    let dataToShow;\n    if (this.state.displaySample) {\n        dataToShow = freqSampleData;\n    } else {\n        dataToShow = freqTargetData;\n    }\n\n\n    return(\n        <Layout>\n        <Fonts/>\n            {isLoading ? (\n                <Paper elevation={\"1\"}>\n                    <Grid container spacing={24} style={loadingStyle} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                        <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                            <Typography variant=\"h2\" gutterBottom style={{color:'white', fontFamily:'Merienda', fontSize: '7vmax', marginTop: '20px'}}> Analyzing Your Speech Sample... </Typography>\n                            <LinearProgress style={{flexGrow:1}}/>\n                        </Grid>\n\n                        <Grid item xs={12} md={12}>\n                            <Particles\n                                params={{\n                                    \"particles\": {\n                                        \"number\": {\n                                            \"value\": 50\n                                        },\n                                        \"size\": {\n                                            \"value\": 5\n                                        }\n                                    }\n                                }} />\n                        </Grid>\n                    </Grid>\n                </Paper>\n            ) : (\n                <Paper elevation={\"1\"}>\n                    <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                        <Grid container spacing={24} style={displayStyle} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                            {/* Summary card */}\n                            <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={scoreCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Lorro Score </Typography>\n                                        <Typography variant=\"h2\" style={{fontFamily:'Merienda', fontSize:'15vmax', color:'#8884d8'}}> {(isNaN(lorroScoreRedux)) ? lorroScore : lorroScoreRedux} </Typography>\n                                        <Typography variant=\"h5\" style={{fontFamily:'Merienda', color:'#8884d8'}}> {(isNaN(lorroScoreRedux)) ? \"Awaiting word transcription...\" : \"With word transcription!\"} </Typography>\n                                    </CardContent>\n                                </Card>\n                                {/* Toggle Samples */}\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Frequency Profile </Typography>\n                                        {/* <Typography variant=\"h4\"> Your overall Lorro accuracy was __% </Typography>\n                                        <Typography variant=\"body\"> View a detailed breakdown of your comparisson below </Typography> */}\n                                        <Typography variant=\"h4\" gutterBottom> Fundamental frequencies vs. spoken phoneme </Typography>\n                                        <Typography variant=\"body\"> Hover over the chart to see the phoneme spoken and what pitch it was spoken at </Typography>\n                                        <ResponsiveContainer width='100%' aspect={4.0/2.0}>\n                                        {this.state.displaySample ? (\n                                            <AreaChart data={dataToShow} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                <XAxis dataKey=\"phoneme\">\n                                                    <Label value=\"Detected Phoneme\" offset={10} position=\"bottom\" />\n                                                </XAxis>\n                                                <YAxis label={{ value: 'Fundamental Frequency (hz)', angle: -90, position: 'insideLeft'}}/>\n                                                <Tooltip />\n                                                <Area type=\"monotone\" dataKey=\"freq\" stroke=\"#8884d8\" fill=\"#8884d8\" unit=\"hz\" activeDot={{ r: 8 }} />\n                                                <Area type=\"monotone\" dataKey=\"note\" stroke=\"#8884d8\" dot={false} />\n                                            </AreaChart>\n                                        ) : (\n                                            <AreaChart data={dataToShow} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                <XAxis dataKey=\"phoneme\">\n                                                    <Label value=\"Detected Phoneme\" offset={10} position=\"bottom\" />\n                                                </XAxis>\n                                                <YAxis label={{ value: 'Fundamental Frequency (hz)', angle: -90, position: 'insideLeft'}}/>\n                                                <Tooltip />\n                                                <Area type=\"monotone\" dataKey=\"freq\" stroke=\"#81C784\" fill=\"#81C784\" unit=\"hz\" activeDot={{ r: 8 }} />\n                                                <Area type=\"monotone\" dataKey=\"note\" stroke=\"#81C784\" dot={false} />\n                                            </AreaChart>\n                                        )}\n                                        </ResponsiveContainer>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={() => this.toggleData()}\n                                        > {this.state.displaySample ? 'View Sample Graph' : 'View Target Graph'} </Button>\n                                        <Grid container spacing={24} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                            <Grid item xs={12} md={6}>\n                                                <Card style={scoreCard}>\n                                                    <CardContent>\n                                                        <Typography variant=\"h3\" gutterBottom> Sample Breakdown </Typography>\n                                                        <Typography variant=\"h5\" gutterBottom> Speech Transcription </Typography>\n                                                        {/* this would need to be the result of transcription */}\n                                                        <Typography variant=\"h5\" style={{margin: '0px 0px 10px 0px', color: '#8884d8', overflowWrap: \"break-word\", wordWrap: \"break-word\"}}> {(this.state.transcribeTextSample !== null) ? this.state.transcribeTextSample : 'Processing...'} </Typography>\n                                                        <Typography variant=\"h5\"> Processed Phonemes </Typography>\n                                                        <Typography variant=\"h5\" style={{margin: '0px 0px 10px 0px', color: '#8884d8', overflowWrap: \"break-word\", wordWrap: \"break-word\"}}> {this.state.segmentedPhonemes} </Typography>\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            onClick={() => this.playTarget(sample_url)}\n                                                        > Play Sample </Button>\n                                                    </CardContent>\n                                                </Card>\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <Card style={targetCard}>\n                                                    <CardContent>\n                                                        <Typography variant=\"h3\" gutterBottom> Target Breakdown </Typography>\n                                                        <Typography variant=\"h5\"> Speech Transcription </Typography>\n                                                        <Typography variant=\"h5\" style={{margin: '0px 0px 10px 0px', color: '#81C784', overflowWrap: \"break-word\", wordWrap: \"break-word\"}}> {wordMatching} </Typography>\n                                                        <Typography variant=\"h5\"> Processed Phonemes </Typography>\n                                                        <Typography variant=\"h5\" style={{margin: '0px 0px 20px 0px', color: '#81C784', overflowWrap: \"break-word\", wordWrap: \"break-word\"}}> {this.state.t_segmentedPhonemes} </Typography>\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            onClick={() => this.playTarget(target_url)}\n                                                        > Play Target </Button>\n                                                    </CardContent>\n                                                </Card>\n                                            </Grid>\n                                        </Grid>\n                                    </CardContent>\n                                </Card>\n\n                                \n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Lorro Score Breakdown </Typography>\n                                        <Typography variant=\"h5\" gutterBottom> {(this.state.transcribeTextSample !== null) ? 'Complete Lorro score breakdown complete!' : 'Processing word matching accuracy...'} </Typography>\n                                        <ResponsiveContainer width='100%' aspect={4.0/2.0}>\n                                        <RadarChart data={compareGraphData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                                            <PolarGrid />\n                                            <PolarAngleAxis dataKey=\"category\" />\n                                            <PolarRadiusAxis domain={[0, 100]}/>\n                                            <Tooltip />\n                                            <Radar name='accuracy' unit='%' dataKey='value' stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                                        </RadarChart>\n                                        </ResponsiveContainer>\n                                    </CardContent>\n                                </Card>\n\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> View Raw Data </Typography>\n                                        <ExpansionPanel>\n                                            <ExpansionPanelSummary>\n                                                <Typography variant=\"body\" gutterBottom style={{textAlign: \"center\"}}> Click to open </Typography>\n                                            </ExpansionPanelSummary>\n                                            <ExpansionPanelDetails>\n                                                <Grid container spacing={24} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                                    {/* Summary card */}\n                                                    <Grid item xs={12} md={12} style={{margin:\"0 15px 0 5px\", width:'100%'}}>\n                                                        <Typography variant=\"h5\" gutterBottom> Phonemes </Typography>\n                                                        <Typography style={wrap} variant=\"body\"> {this.state.segmentedPhonemes} </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={12} md={12} style={{margin:\"0 15px 0 5px\", width:'100%'}}>\n                                                        <Typography variant=\"h5\" gutterBottom> Note Progression </Typography>\n                                                        <Typography style={wrap} variant=\"body\"> {this.state.noteProgression} </Typography>\n                                                    </Grid>\n                                                    <Grid item xs={12} md={12} style={{margin:\"0 15px 0 5px\", width:'100%'}}>\n                                                        <Typography variant=\"h5\" gutterBottom> Fundamental Frequencies </Typography>\n                                                        <Typography style={wrap} variant=\"body\"> {this.state.frequencies} </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </ExpansionPanelDetails>\n                                        </ExpansionPanel>\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </Layout>  \n    )}\n}\n\nexport default results","var http = require('http');\n// var fs = require('fs');\n\nfunction readFile(file, callback){\n\tvar raw_file = new XMLHttpRequest();\n\traw_file.overrideMimeType(\"application/json\");\n\traw_file.open(\"get\", file, true);\n\traw_file.onreadystatechange = function() {\n\t\tif (raw_file.readyState == 4 && raw_file.status == \"200\")\n\t\t\tcallback(raw_file.responseText);\n\t}\n\traw_file.send(null);\n}\n\nexport function start() {\n\treadFile(\"/static/images/results/notes.json\", run);\n\treadFile(\"/static/images/results/text.txt\", otherRun1);\n\treadFile(\"/static/images/results/phoneme.txt\", otherRun2);\n\treadFile(\"/static/images/results/phoneme.txt\", otherRun2);\n}\n\nexport function parseFile(file) {\n\tconsole.log(file);\n}\n\n\n\nfunction otherRun1(file) {\n\tvar body = document.querySelector(\".result-2\");\n\tbody.innerHTML = file;\n}\n\nfunction otherRun2(file) {\n\tvar body = document.querySelector(\".result-3\");\n\tbody.innerHTML = file;\n}\n\nfunction parse(file) {\n\tvar body = document.querySelector(\".result-4\")\n\tbody.innerHTML = file;\n}\n\nfunction run (json) {\n\tvar notesArr = JSON.parse(json);\n\tvar index;\n\tvar last_bold;\n\tvar interval = null;\n\n\tfunction play() {\n\t\tif (interval) stop();\n\t\tindex = 0;\n\t\tlast_bold = 0;\n\t\tplay_next();\n\t\tinterval = setInterval(play_next, 10);\n\t}\n\n\tfunction play_next() {\n\t\tif (index >= notesArr.length) {\n\t\t\tstop();\n\t\t\treturn;\n\t\t}\n\t\tif (new_note(index)) {\n\t\t\tunbold(last_bold);\n\t\t\tbold(index);\n\t\t}\n\t\tindex++;\n\t}\n\n\tfunction stop() {\n\t\tclearInterval(interval);\n\t\tinterval = null;\n\t\tunbold(last_bold);\n\t}\n\n\tfunction bold(ind) {\n\t\tdocument.querySelector(`.note-${ind}`).classList.add(\"note_bold\");\n\t\tdocument.querySelector(`.note-${ind}`).style.fontWeight = \"bold\";\n\t\tdocument.querySelector(`.note-${ind}`).style.fontSize = \"30px\";\n\t\tlast_bold = ind;\n\t}\n\n\tfunction unbold(ind) {\n\t\tif (ind < 0) return;\n\t\tdocument.querySelector(`.note-${ind}`).classList.remove(\"note_bold\");\n\t\tdocument.querySelector(`.note-${ind}`).style.fontWeight = \"normal\";\n\t\tdocument.querySelector(`.note-${ind}`).style.fontSize = \"16px\";\n\t}\n\n\tfunction new_note(ind) {\n\t\tif (ind < 1) return true;\n\t\treturn notesArr[ind -1] != notesArr[ind];\n\t}\n\n\tvar body = document.querySelector(\".result\");\n\tvar button = document.querySelector(\".play_button\");\n\tvar audio = document.querySelector(\".audio\");\n\tvar notes = document.createElement('div');\n\tnotes.classList.add(\"notes\");\n\tnotes.style.display = \"flex\";\n\tnotes.style.flexWrap = \"wrap\";\n\tnotes.style.justifyContent = \"space-around\";\n\n\tvar noteEls\n\tfor (var i = 0; i < notesArr.length; i++) {\n\t\tif (new_note(i)) {\n\t\t\tvar noteEl = document.createElement(\"div\");\n\t\t\tnoteEl.innerHTML = notesArr[i];\n\t\t\tnoteEl.classList.add(\"note\");\n\t\t\tnoteEl.classList.add(`note-${i}`);\n\t\t\tnoteEl.style.textAlign = \"center\";\n\t\t\tnoteEl.style.width = \"30px\";\n\t\t\tnotes.appendChild(noteEl);\n\t\t}\n\t}\n\n\tbutton.addEventListener(\"click\", () => {\n\t\taudio.currentTime = 0;\n\t\taudio.play();\n\t\tplay();\n\t});\n\n\tbody.appendChild(notes);\n}","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@material-ui/core\");","module.exports = require(\"@material-ui/core/AppBar\");","module.exports = require(\"@material-ui/core/Button\");","module.exports = require(\"@material-ui/core/Card\");","module.exports = require(\"@material-ui/core/CardActionArea\");","module.exports = require(\"@material-ui/core/CardActions\");","module.exports = require(\"@material-ui/core/CardMedia\");","module.exports = require(\"@material-ui/core/CircularProgress\");","module.exports = require(\"@material-ui/core/CssBaseline\");","module.exports = require(\"@material-ui/core/ExpansionPanel\");","module.exports = require(\"@material-ui/core/ExpansionPanelDetails\");","module.exports = require(\"@material-ui/core/ExpansionPanelSummary\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/LinearProgress\");","module.exports = require(\"@material-ui/core/Paper\");","module.exports = require(\"@material-ui/core/Toolbar\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"@material-ui/icons/ExpandMore\");","module.exports = require(\"axios\");","module.exports = require(\"http\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-particles-js\");","module.exports = require(\"recharts\");","module.exports = require(\"victory\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAgBA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA/FA;AAsGA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AApIA;AAsIA;AACA;AACA;AACA;AAzIA;AA2IA;AACA;AACA;AACA;AACA;AA/IA;AAiJA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxJA;AA0JA;AACA;AAEA;AACA;AA9JA;AAgKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAnKA;AAqKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9LA;AAqNA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnOA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AAGA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AACA;;;;;;;;;;;;;;;AAgeaaA;;;;AA1bA;AACA;AA4bA;;;;;;;;;;;;ACjhBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}