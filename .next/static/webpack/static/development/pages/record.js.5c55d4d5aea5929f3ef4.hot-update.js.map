{"version":3,"file":"static/webpack/static/development/pages/record.js.5c55d4d5aea5929f3ef4.hot-update.js","sources":["webpack:///./node_modules/file-saver/dist/FileSaver.min.js","webpack:///./pages/record.js"],"sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open(\"GET\",b),e.responseType=\"blob\",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error(\"could not download file\")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open(\"HEAD\",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open(\"\",\"_blank\"),e&&(e.document.title=e.document.body.innerText=\"downloading...\"),\"string\"==typeof a)return c(a,b,d);var g=\"application/octet-stream\"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((i||g&&h)&&\"object\"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}});f.saveAs=a.saveAs=a,\"undefined\"!=typeof module&&(module.exports=a)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport { Typography, ButtonBase, DialogTitle } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nimport Recorder from 'recorder-js';\nimport { recording } from '../scripts/record-script';\nimport { saveAs } from 'file-saver';\n\n\nconst styles = {\n    textAlign: \"center\",\n}\n\n// audio stuff\nlet isRecording = false;\nlet blob = null;\nlet stream, audioContext, audioCtx, mediaRecorder, audioURL;\nlet chunks = [];\n\n\nclass record extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appIsMounted: false,\n            recording: false,\n            completedRecording: false,\n        };\n    }\n\n    \n\n    componentDidMount() {\n        requestAnimationFrame(() => {\n            this.setState({ appIsMounted: true });\n        });\n\n        // initialize stuff for audio recording\n        // audioCtx = new (window.AudioContext || webkitAudioContext)();\n        const constraints = {audio: true};\n        navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n            mediaRecorder = new MediaRecorder(stream)\n            // console.log('stream started!', stream)\n        })\n\n        console.log(this.state)\n        \n        // recorder = new Recorder(audioContext, {\n        //     // An array of 255 Numbers\n        //     // You can use this to visualize the audio stream\n        //     // If you use react, check out react-wave-stream\n        //     onAnalysed: data => console.log(data),\n        // });\n    }\n\n    recordStart = () => {\n        // initialize the audio recorder stuff\n        audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        mediaRecorder.start();\n        console.log(\"recorder started\");\n        \n        mediaRecorder.ondataavailable = function(e) {\n            chunks.push(e.data);\n        }\n    }\n\n    recordStop = () => {\n        mediaRecorder.stop();\n        console.log(\"recorder stopped\");\n\n        console.log(chunks);\n\n        blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        audioURL = window.URL.createObjectURL(blob);\n        console.log(audioURL)\n        this.setState({completedRecording: true})\n        console.log(this.state)\n\n        // audio.controls = true;\n        // var blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        // chunks = [];\n        // var audioURL = window.URL.createObjectURL(blob);\n    }\n\n    render() {\n        if (this.state.appIsMounted) {\n            let s\n\n            return (\n                <div>\n                    {/* { this.state.appIsMounted && React.createElement(require('recorder-js').default)} */}\n                    <Layout>\n                        <Paper elevation={\"1\"}>\n                            <Grid container spacing={24}>\n                                {/* <div id='buttons'>\n                                    <button class='record'>Record</button>\n                                    <button class='stop'>Stop</button>\n                                </div> */}\n\n\n\n\n                                {/* title and subtitle */}\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h1\" component=\"h3\" style={styles}>\n                                        Record\n                                    </Typography>\n                                    <Typography variant=\"h4\" style={styles}>\n                                        The interactive speech training suite\n                                    </Typography>\n                                </Grid>\n                                {/* start/stop buttons */}\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {/* <Button variant='contained' color='primary' onClick={() => this.toggleRecord(recorder)}> RECORD </Button> */}\n                                    <Button variant='contained' color='secondary' onClick={this.recordStart}> START </Button>\n                                    <Button variant='contained' color='secondary' onClick={this.recordStop}> STOP </Button>\n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    \n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {this.state.completedRecording &&\n                                        <div>\n                                            <audio controls src={audioURL} type=\"audio/ogg\"> </audio>\n                                        </div>\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Layout>\n                </div>\n            );\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default record"],"mappings":";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAmpHA;AACA;AAsHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}