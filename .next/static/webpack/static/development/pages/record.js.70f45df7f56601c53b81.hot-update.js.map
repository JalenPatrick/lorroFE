{"version":3,"file":"static/webpack/static/development/pages/record.js.70f45df7f56601c53b81.hot-update.js","sources":["webpack:///./pages/record.js","webpack:///./scripts/record-script.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport { Typography, ButtonBase, DialogTitle } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nimport Recorder from 'recorder-js';\nimport { recording } from '../scripts/record-script';\n\n\nconst styles = {\n    textAlign: \"center\",\n}\n\n// audio stuff\nlet isRecording = false;\nlet blob = null;\nlet stream, audioContext, audioCtx, mediaRecorder, audioURL;\nlet chunks = [];\n\n\nclass record extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appIsMounted: false,\n            recording: false,\n            completedRecording: false,\n        };\n    }\n\n    \n\n    componentDidMount() {\n        requestAnimationFrame(() => {\n            this.setState({ appIsMounted: true });\n        });\n\n        // initialize stuff for audio recording\n        audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        audioCtx = new (window.AudioContext || webkitAudioContext)();\n        const constraints = {audio: true};\n        navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n            mediaRecorder = new MediaRecorder(stream)\n            console.log('stream started!', stream)\n        })\n\n        console.log(this.state)\n        \n        // recorder = new Recorder(audioContext, {\n        //     // An array of 255 Numbers\n        //     // You can use this to visualize the audio stream\n        //     // If you use react, check out react-wave-stream\n        //     onAnalysed: data => console.log(data),\n        // });\n    }\n\n    recordStart = () => {\n        recording();\n        // mediaRecorder.start();\n        // console.log(\"recorder started\");\n        \n        // mediaRecorder.ondataavailable = function(e) {\n        //     chunks.push(e.data);\n        // }\n    }\n\n    recordStop = () => {\n        mediaRecorder.stop();\n        console.log(\"recorder stopped\");\n\n        console.log(chunks);\n        let blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        audioURL = window.URL.createObjectURL(blob);\n        console.log(audioURL)\n        this.setState({completedRecording: true})\n        console.log(this.state)\n    }\n\n    render() {\n        if (this.state.appIsMounted) {\n            let s\n\n            return (\n                <div>\n                    {/* { this.state.appIsMounted && React.createElement(require('recorder-js').default)} */}\n                    <Layout>\n                        <Paper elevation={\"1\"}>\n                            <Grid container spacing={24}>\n                                {/* title and subtitle */}\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h1\" component=\"h3\" style={styles}>\n                                        Record\n                                    </Typography>\n                                    <Typography variant=\"h4\" style={styles}>\n                                        The interactive speech training suite\n                                    </Typography>\n                                </Grid>\n                                {/* start/stop buttons */}\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {/* <Button variant='contained' color='primary' onClick={() => this.toggleRecord(recorder)}> RECORD </Button> */}\n                                    <Button variant='contained' color='secondary' onClick={this.recordStart}> START </Button>\n                                    <Button variant='contained' color='secondary' onClick={this.recordStop}> STOP </Button>\n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    \n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {this.state.completedRecording &&\n                                        <div>\n                                            <audio controls src=\"/static/images/results/sample.wav\" type=\"audio/ogg\"> </audio>\n                                            <audio controls src={audioURL} type=\"audio/ogg\"> </audio>\n                                        </div>\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Layout>\n                </div>\n            );\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default record","// let audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n// let recorder = new Recorder(audioContext);\n\nexport const recording = () => {\n  if (navigator.mediaDevices.getUserMedia) {\n    console.log('getUserMedia supported.');\n  \n    var constraints = { audio: true };\n    var chunks = [];\n  \n    var onSuccess = function(stream) {\n      var mediaRecorder = new MediaRecorder(stream);\n  \n      // visualize(stream);\n  \n      record.onclick = function() {\n        mediaRecorder.start();\n        console.log(mediaRecorder.state);\n        console.log(\"recorder started\");\n        record.style.background = \"red\";\n  \n        stop.disabled = false;\n        record.disabled = true;\n      }\n  \n      stop.onclick = function() {\n        mediaRecorder.stop();\n        console.log(mediaRecorder.state);\n        console.log(\"recorder stopped\");\n        record.style.background = \"\";\n        record.style.color = \"\";\n        // mediaRecorder.requestData();\n  \n        stop.disabled = true;\n        record.disabled = false;\n      }\n  \n      mediaRecorder.onstop = function(e) {\n        console.log(\"data available after MediaRecorder.stop() called.\");\n  \n        var clipName = prompt('Enter a name for your sound clip?','My unnamed clip');\n        console.log(clipName);\n        var clipContainer = document.createElement('article');\n        var clipLabel = document.createElement('p');\n        var audio = document.createElement('audio');\n        var deleteButton = document.createElement('button');\n       \n        clipContainer.classList.add('clip');\n        audio.setAttribute('controls', '');\n        deleteButton.textContent = 'Delete';\n        deleteButton.className = 'delete';\n  \n        if(clipName === null) {\n          clipLabel.textContent = 'My unnamed clip';\n        } else {\n          clipLabel.textContent = clipName;\n        }\n  \n        clipContainer.appendChild(audio);\n        clipContainer.appendChild(clipLabel);\n        clipContainer.appendChild(deleteButton);\n        soundClips.appendChild(clipContainer);\n  \n        audio.controls = true;\n        var blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n        chunks = [];\n        var audioURL = window.URL.createObjectURL(blob);\n        audio.src = audioURL;\n        console.log(\"recorder stopped\");\n  \n        deleteButton.onclick = function(e) {\n          evtTgt = e.target;\n          evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n        }\n  \n        clipLabel.onclick = function() {\n          var existingName = clipLabel.textContent;\n          var newClipName = prompt('Enter a new name for your sound clip?');\n          if(newClipName === null) {\n            clipLabel.textContent = existingName;\n          } else {\n            clipLabel.textContent = newClipName;\n          }\n        }\n      }\n  \n      mediaRecorder.ondataavailable = function(e) {\n        chunks.push(e.data);\n      }\n    }\n  \n    var onError = function(err) {\n      console.log('The following error occured: ' + err);\n    }\n  \n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  \n  } \n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoCA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA5CA;AA8CA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAtDA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAwvGA;AACA;AAyGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}