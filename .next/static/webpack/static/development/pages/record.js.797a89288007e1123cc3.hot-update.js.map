{"version":3,"file":"static/webpack/static/development/pages/record.js.797a89288007e1123cc3.hot-update.js","sources":["webpack:///./pages/record.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport { Typography, ButtonBase, DialogTitle } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nimport Recorder from 'recorder-js';\n\nimport {recording} from '../scripts/record-script'\n\n\nconst styles = {\n    textAlign: \"center\",\n}\n\n// audio stuff\nlet isRecording = false;\nlet blob = null;\nlet stream, audioContext, mediaRecorder, audioURL;\nlet chunks = [];\n\n\nclass record extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appIsMounted: false,\n            recording: false,\n            completedRecording: false,\n        };\n    }\n\n    \n\n    componentDidMount() {\n        requestAnimationFrame(() => {\n            this.setState({ appIsMounted: true });\n        });\n\n        // initialize stuff for audio recording\n        audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        const constraints = {audio: true};\n        navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n            mediaRecorder = new MediaRecorder(stream)\n            console.log('stream started!', stream)\n        })\n\n        console.log(this.state)\n        \n        // recorder = new Recorder(audioContext, {\n        //     // An array of 255 Numbers\n        //     // You can use this to visualize the audio stream\n        //     // If you use react, check out react-wave-stream\n        //     onAnalysed: data => console.log(data),\n        // });\n    }\n\n    toggleRecord = (rec) => {\n        // console.log(rec)\n        // console.log(ac)\n        // let audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        // let recorder = new Recorder(audioContext);\n\n        // this.setState({ recording: !this.state.recording })\n\n        // if (!this.state.recording) {\n        //     console.log('recording.....')\n        //     navigator.mediaDevices.getUserMedia({audio: true})\n        //     .then(stream => rec.init(stream))\n        //     .catch(err => console.log('Uh oh... unable to get stream...', err));\n        //     // recorder.start();\n        //     rec.start()\n        // } else {\n        //     console.log('recorder status: ', recorder)\n        //     recorder.stop().then(({recBlob}) => {\n        //         blob = recBlob\n        //     });\n        //     console.log('stopped')\n        // }\n    }\n\n    recordStart = () => {\n        recording()\n\n\n        // mediaRecorder.start();\n        // console.log(mediaRecorder)\n        // console.log(\"recorder started\");\n        \n        // mediaRecorder.ondataavailable = function(e) {\n        //     chunks.push(e.data);\n        // }\n    }\n\n    recordStop = () => {\n        mediaRecorder.stop();\n        console.log(mediaRecorder)\n        console.log(\"recorder stopped\");\n\n        console.log(chunks);\n        let blob = new Blob(chunks, {type:'audio/wav'});\n        audioURL = window.URL.createObjectURL(blob);\n        console.log(audioURL)\n        this.setState({completedRecording: true})\n        console.log(this.state)\n    }\n\n    render() {\n        if (this.state.appIsMounted) {\n            let s\n\n            return (\n                <div>\n                    {/* { this.state.appIsMounted && React.createElement(require('recorder-js').default)} */}\n                    <Layout>\n                        <Paper elevation={\"1\"}>\n                            <Grid container spacing={24}>\n                                {/* title and subtitle */}\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h1\" component=\"h3\" style={styles}>\n                                        Record\n                                    </Typography>\n                                    <Typography variant=\"h4\" style={styles}>\n                                        The interactive speech training suite\n                                    </Typography>\n                                </Grid>\n                                {/* start/stop buttons */}\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {/* <Button variant='contained' color='primary' onClick={() => this.toggleRecord(recorder)}> RECORD </Button> */}\n                                    <Button variant='contained' color='secondary' onClick={this.recordStart}> START </Button>\n                                    <Button variant='contained' color='secondary' onClick={this.recordStop}> STOP </Button>\n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    \n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    <Typography> Play your recording </Typography>\n                                    {this.state.completedRecording &&\n                                        <audio controls src={audioURL} type=\"audio/ogg\"> </audio>\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Layout>\n                </div>\n            );\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default record"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoCA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA;AA2DA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAtEA;AAwEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAjFA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAohIA;AACA;AAkIA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}