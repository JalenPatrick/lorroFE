{"version":3,"file":"static/webpack/static/development/pages/record.js.86ea6e44e39cf0a83849.hot-update.js","sources":["webpack:///./pages/record.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport { Typography, ButtonBase, DialogTitle } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nimport Recorder from 'recorder-js';\nimport { recording } from '../scripts/record-script';\nimport { saveAs } from 'file-saver';\n\n\nconst styles = {\n    textAlign: \"center\",\n}\n\n// audio stuff\nlet isRecording = false;\nlet blob = null;\nlet stream, audioContext, audioCtx, mediaRecorder, audioURL;\nlet chunks = [];\n\n\nclass record extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appIsMounted: false,\n            recording: false,\n            completedRecording: false,\n        };\n    }\n\n    \n\n    componentDidMount() {\n        requestAnimationFrame(() => {\n            this.setState({ appIsMounted: true });\n        });\n\n        // initialize stuff for audio recording\n        // audioCtx = new (window.AudioContext || webkitAudioContext)();\n        const constraints = {audio: true};\n        navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n            mediaRecorder = new MediaRecorder(stream)\n            // mediaRecorder.mimeType = 'audio/wav';\n            // mediaRecorder.audioChannels = 2;\n            // console.log('stream started!', stream)\n        })\n\n        console.log(this.state)\n        \n        // recorder = new Recorder(audioContext, {\n        //     // An array of 255 Numbers\n        //     // You can use this to visualize the audio stream\n        //     // If you use react, check out react-wave-stream\n        //     onAnalysed: data => console.log(data),\n        // });\n    }\n\n    recordStart = () => {\n        // initialize the audio recorder stuff\n        audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n        mediaRecorder.start();\n        console.log(\"recorder started\");\n    }\n\n    recordStop = () => {\n        mediaRecorder.stop();\n        console.log(\"recorder stopped\");\n\n        console.log(chunks);\n\n        this.setState({completedRecording: true})\n\n        mediaRecorder.ondataavailable = function(e) {\n            chunks.push(e.data);\n            blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });\n            audioURL = window.URL.createObjectURL(blob);\n            console.log(audioURL)\n            console.log(this.state)\n            // saveAs(audioURL, \"sound.wav\");\n        }\n    }\n\n    recordPlay = () => {\n        const a = new Audio(audioURL);\n        a.play();\n    }\n\n    render() {\n        if (this.state.appIsMounted) {\n            let s\n\n            return (\n                <div>\n                    {/* { this.state.appIsMounted && React.createElement(require('recorder-js').default)} */}\n                    <Layout>\n                        <Paper elevation={\"1\"}>\n                            <Grid container spacing={24}>\n\n\n\n\n                                {/* title and subtitle */}\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h1\" component=\"h3\" style={styles}>\n                                        Record\n                                    </Typography>\n                                    <Typography variant=\"h4\" style={styles}>\n                                        The interactive speech training suite\n                                    </Typography>\n                                </Grid>\n                                {/* start/stop buttons */}\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {/* <Button variant='contained' color='primary' onClick={() => this.toggleRecord(recorder)}> RECORD </Button> */}\n                                    <Button variant='contained' color='secondary' onClick={this.recordStart}> START </Button>\n                                    <Button variant='contained' color='secondary' onClick={this.recordStop}> STOP </Button>\n                                    <Button variant='contained' color='secondary' onClick={this.recordPlay}> PLAY </Button>\n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    \n                                </Grid>\n                                <Grid container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    {this.state.completedRecording &&\n                                        <div>\n                                            <audio controls src={audioURL} type=\"audio/ogg\"> </audio>\n                                        </div>\n                                    }\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Layout>\n                </div>\n            );\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default record"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqCA;AACA;AACA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;AACA;AA/DA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAgpHA;AACA;AAsHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}