{"version":3,"file":"static/webpack/static/development/pages/record.js.adb35f2172e781f3de86.hot-update.js","sources":["webpack:///./pages/record.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Router, Route, Switch } from \"react-router\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport Fonts from '../components/Fonts'\nimport { Typography, ButtonBase, DialogTitle } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nimport axios from 'axios'\n\nimport Recorder from 'recorder-js';\nimport { recording } from '../scripts/record-script';\nimport { saveAs } from 'file-saver';\n\nimport { createHashHistory } from 'history'\n\n\n\nvar cors = require('cors')\n\n\nconst group = {\n    height: \"30vh\",\n    textAlign: \"center\"\n}\n\nconst buttonGroup = {\n    height: \"10vh\",\n    textAlign: \"center\"\n}\n\nconst result = {\n    height: \"auto\",\n    textAlign: \"center\"\n}\n\nconst buttonStyle = {\n    marginLeft: \"20px\",\n    marginRight: \"20px\",\n    minWidth: \"22vmin\"\n}\n\nconst submitButton = {\n    marginLeft: \"20px\",\n    marginRight: \"20px\",\n    width: \"50vw\"\n}\n\n// audio stuff\nlet isRecording = false;\nlet blob = null;\nlet audioContext, audioURL;\nlet recorder;\n\n\nclass record extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appIsMounted: false,\n            recording: false,\n            completedRecording: false,\n            uploadData: null,\n            loading: false,\n            submitted: false,\n            submitText: 'Submit Recording'\n        };\n    }\n\n    componentDidMount() {\n        requestAnimationFrame(() => {\n            this.setState({ appIsMounted: true });\n        });\n\n        const constraints = {audio: true};\n        const cons = { audio: true }\n        navigator.mediaDevices.getUserMedia(cons).then(stream => {\n            audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n            recorder = new Recorder(audioContext)\n            recorder.init(stream)\n            console.log(recorder)\n        })\n    }\n\n    recordStart = () => {\n        // initialize the audio recorder stuff\n        blob = null;\n        audioURL = null;\n        this.setState({recording:true});\n        recorder.start();\n    }\n\n    recordStop = async () => {\n        await recorder.stop().then(({blob, buffer}) => {\n            blob = blob;\n            audioURL = window.URL.createObjectURL(blob);\n            this.setState({uploadData: blob})\n        })\n\n        this.setState({completedRecording: true})\n        this.setState({recording:false});\n    }\n\n    createDownloadLink = () => {\n        const fileName = new Date().toISOString();\n        console.log(fileName)\n    }\n\n    recordPlay = () => {\n        const a = new Audio(audioURL);\n        a.play();\n    }\n\n    downloadRecording = () => {\n        // this saves a local copy of the audio\n        saveAs(audioURL, \"lorro_record.wav\");\n    }\n\n    test = () => {\n        let queryParam\n        window.location(`/results/${queryParam}`)\n    }\n\n    // uploads the audio recording to the AWS server via the following 3 step process\n    submitRecording = async () => {\n        const data = this.state.uploadData\n\n        let res\n        let upload_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/upload\"\n        let process_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/process\"\n        \n        const cors_headers = {\n            // \"Access-Control-Allow-Origin\": \"*\",\n            // \"content-type\":\"application/json\",\n        }\n        \n        await axios.get(upload_url, {headers: cors_headers}).then(response => {\n            console.log(response)\n            res = response.data\n            console.log('get success')\n            this.setState({submitText:'Uploading sample....'})\n        });\n\n        console.log('res', res)\n\n        const file_name = res.split('/')[3].split('?')[0]\n        console.log(file_name)\n\n        await axios.put(res, data).then(response => {\n            console.log(response)\n            console.log('put success')\n            this.setState({loading:true})\n        })\n\n        let phonemes = []\n        await axios.post(process_url, file_name).then(response => {\n            console.log(response)\n            phonemes = response.data.segmented_phonemes\n            console.log('post success')\n            this.setState({submitted:true, submitText:'Submitted!'})\n        })\n\n        console.log('phonemes', phonemes)\n        let cleanPhonemes = []\n        let prevInsert = null\n\n        phonemes.forEach((pho) => {\n            if(pho != '2' && pho != prevInsert) {\n                cleanPhonemes.push(pho);\n                prevInsert = pho;\n                // console.log(pho)\n            }\n        })\n\n        console.log(cleanPhonemes)\n\n\n        // phonemes.forEach(phoneme => {\n        //     if (phoneme != '2') {\n        //         cleanPhonemes.push(phoneme)\n        //     }\n        // })\n\n        // console.log(cleanPhonemes)\n        \n    }\n\n    render() {\n        const {history} = this.props\n        if (this.state.appIsMounted) {\n            return (\n                <div>\n                    <Fonts/>\n                    <Layout>\n                        <Paper elevation={\"1\"}>\n                            <Grid container spacing={24}>\n                                {/* title and subtitle */}\n                                <Grid item xs={12} style={group}>\n                                    <Typography variant=\"h1\" component=\"h3\" style={{fontFamily:'Roboto'}}>\n                                        Record\n                                    </Typography>\n                                    <Typography variant=\"h5\">\n                                        Click the record button and record an attempt to match your selected speech sample.\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={8} container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\" alignContent=\"space-between\">\n                                    <Card className=\"record-card\" style={{padding:10, marginBottom:'5vh', borderBottom:'3px solid #3f51b5'}}>\n                                        <CardContent>\n                                            <Typography gutterBottom variant=\"body\" style={{textAlign:'center', fontFamily:'Lato'}}> Please say the following sentence: </Typography>\n                                            <Typography variant=\"h5\" style={{textDecoration:'none', fontFamily:'Lato'}}>\n                                                She had your dark suit in greasy wash water all year\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                                {/* start/stop buttons */}\n                                <Grid style={buttonGroup} container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\" alignContent=\"space-between\">\n                                    <Button\n                                        style={buttonStyle}\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.recordStart}>\n                                    Record Sample </Button>\n                                    <Button\n                                        style={buttonStyle}\n                                        variant='contained'\n                                        color='secondary'\n                                        onClick={this.recordStop}\n                                        disabled={!this.state.recording}>\n                                    Stop Recording </Button>\n                                    <Button\n                                        style={buttonStyle}\n                                        variant='contained'\n                                        color='default'\n                                        onClick={this.recordPlay}\n                                        disabled={!this.state.completedRecording}> \n                                    Play Recording </Button>\n                                    <Button\n                                        style={buttonStyle}\n                                        variant='contained'\n                                        color='secondary'\n                                        onClick={this.downloadRecording}\n                                        disabled={!this.state.completedRecording}> \n                                    Download </Button>\n                                    <Button\n                                        style={buttonStyle}\n                                        variant='contained'\n                                        color='secondary'\n                                        onClick={this.test}\n                                        disabled={!this.state.completedRecording}> \n                                    Navigate </Button>\n                                </Grid>\n                                <Grid style={buttonGroup} container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    <div>\n                                        <Button\n                                            style={submitButton}\n                                            variant='contained'\n                                            color='primary'\n                                            onClick={this.submitRecording}\n                                            disabled={!this.state.completedRecording}> \n                                        {this.state.submitText} </Button>\n                                    </div>\n                                </Grid>\n                                {this.state.submitted && <Grid style={result} container xs={12} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                                    <Card className=\"record-card\" style={{padding:5, marginBottom:'5vh', marginTop:'5vh', borderBottom:'3px solid #43A047'}}>\n                                        <CardContent>\n                                            <Typography variant=\"h5\" style={{textDecoration:'none', fontFamily:'Lato'}}>\n                                                Successfully submitted your speech sample!\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>}\n                            </Grid>\n                        </Paper>\n                    </Layout>\n                </div>\n            );\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default record"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AANA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArCA;AAgDA;AACA;AACA;AACA;AAnDA;AAqDA;AACA;AACA;AACA;AAxDA;AA0DA;AACA;AACA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAoEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAEA;AAFA;AAPA;AAAA;AAYA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAlBA;AAmBA;AAEA;AACA;AAtBA;AAAA;AAyBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7BA;AA8BA;AA9BA;AAAA;AAgCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AArCA;AAsCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AA5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAylOA;AACA;AAoOA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}