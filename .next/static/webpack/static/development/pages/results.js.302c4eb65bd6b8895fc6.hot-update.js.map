{"version":3,"file":"static/webpack/static/development/pages/results.js.302c4eb65bd6b8895fc6.hot-update.js","sources":["webpack:///./pages/results.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Layout from '../components/Layout'\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport {start, parseFile} from './script-1';\nimport { Typography, ButtonBase, DialogTitle, CardContent, CardHeader, Button } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport Fonts from '../components/Fonts'\nimport { \n    AreaChart,\n    Area,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    ResponsiveContainer,\n    Label,\n    Radar,\n    RadarChart,\n    PolarGrid,\n    PolarAngleAxis,\n    PolarRadiusAxis\n} from 'recharts';\n\n// var fs = require('fs')\nimport * as V from 'victory';\nimport axios from 'axios'\n\n\nconst yourCard = {\n    borderTop: \"5px solid #0097a7\",\n    borderRadius: \"5px\"\n}\n\nconst sampleCard = {\n    borderTop: \"5px solid #ec407a\",\n    borderRadius: \"5px\",\n    margin: \"5vh 0 5vh 0\",\n}\n\nconst loadingStyle = {\n    textAlign: \"center\",\n    marginTop:'-10',\n    backgroundColor: \"#e0e0e0\",\n    height: '100vh'\n}\n\nconst displayStyle = {\n    textAlign: \"center\",\n    marginTop:'-10',\n    backgroundColor: \"#e0e0e0\",\n    height: 'auto'\n}\n\nclass results extends Component {\n    constructor() {\n        super()\n        this.state = {\n            isLoading: true,\n            rawPhonemes: null,\n            segmentedPhonemes: null,\n            noteProgression: null,\n            frequencies: null\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({isLoading: true})\n        // console.log(this.props)\n        // console.log(window.location.search)\n        const process_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/process\"\n        const transcribe_url = \"https://3qub47bp42.execute-api.us-east-2.amazonaws.com/prod/transcribe\"\n        // get file name from query param\n        const fileName = window.location.search.split('=')[1]\n        console.log(fileName)\n\n        let transcribe\n        \n        // get info from backend and take what we need\n        await axios.post(process_url, fileName).then(response => {\n            console.log(response)\n            console.log('post success')\n            const data = response.data\n\n            const sampleLength = data.segmented_phonemes\n\n            this.setState({\n                isLoading: false,\n                rawPhonemes: data.segmented_phonemes,\n                segmentedPhonemes: data.backend_decoded,\n                noteProgression: data.note_progression,\n                frequencies: data.fundamental_frequencies\n            })\n        })\n\n        await axios.post(process_url, fileName).then(response => {\n            console.log(response)\n            console.log('post success')\n            const data = response.data\n\n            const sampleLength = data.segmented_phonemes\n\n            this.setState({\n                \n            })\n        })\n    }\n\n    getFreqData = (freqArray, phonemeArray, notesArray) => {\n        console.log(freqArray)\n        console.log(phonemeArray)\n        let dataArray = []\n\n        if (freqArray)\n            for (let i = 0; i < freqArray.length; i++) {\n                let dataObject = {\n                    freq: Math.round(freqArray[i]),\n                    phoneme: phonemeArray[i],\n                    note: notesArray[i]\n                }\n                dataArray.push(dataObject)\n            }\n        console.log(dataArray)\n        return dataArray\n    }\n\n    // used to contruct the radial plot which displays the users accuracy to the target sample\n    // based on 3 main fields\n    // 1. Pitch --> average spoken word frequency over the sample\n    // 2. Word Accuracy --> how correct the words are (use confidence from AWS)\n    // 3. Timing --> raw duration of the samples\n    getCompareData = (freqArray, wordArray) => {\n        let avgFreq, totalSum, totalFreqs, speakingTime;\n        \n        if (freqArray) {\n            for (let i = 0; i < freqArray.length; i++) {\n                if (freqArray[i] != 0) {\n                    totalSum += freqArray[i];\n                    totalFreqs += 1;\n                }\n            }\n        }\n        \n\n        speakingTime = totalFreqs * 0.02;\n        avgFreq = totalSum/totalFreqs;\n\n        const pitchObject = {\n            category: \"Pitch Matching\",\n            value: 65,\n            fullMark: 100 \n        }\n\n        const wordAccuracyObject = {\n            category: \"Word Matching\",\n            value: 90,\n            fullMark: 100 \n        }\n        \n        const timingObject = {\n            category: \"Timing Matching\",\n            value: 30,\n            fullMark: 100 \n        }\n\n        const dataArray = [pitchObject, wordAccuracyObject, timingObject]\n        return dataArray;\n    }\n\n    render() {\n    const isLoading = this.state.isLoading\n    const freqGraphData = this.getFreqData(this.state.frequencies, this.state.rawPhonemes, this.state.noteProgression)\n    const compareGraphData = this.getCompareData(this.state.frequencies, [])\n    return(\n        <Layout>\n        <Fonts/>\n            {isLoading ? (\n                <Paper elevation={\"1\"}>\n                    <Grid container spacing={24} style={loadingStyle} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                        <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                            {/* https://s3.us-east-2.amazonaws.com/lorro/5f52814c-4865-11e9-8577-eb571fcec879.wav */}\n                            <Typography variant=\"h2\" gutterBottom style={{color:'black', fontFamily:'Merienda', fontSize: '7vmax'}}> Analyzing Your Speech Sample... </Typography>\n                            <LinearProgress style={{flexGrow:1}}/> \n                        </Grid>\n                    </Grid>\n                </Paper>\n            ) : (\n                <Paper elevation={\"1\"}>\n                    <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                        <Grid container spacing={24} style={displayStyle} direction=\"row\" justifyContent=\"center\" alignItems=\"center\" justify=\"center\">\n                            {/* Summary card */}\n                            <Grid item xs={12} md={12} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Results Summary </Typography>\n                                        {/* <Typography variant=\"h4\"> Your overall Lorro accuracy was __% </Typography>\n                                        <Typography variant=\"body\"> View a detailed breakdown of your comparisson below </Typography> */}\n                                        <Typography variant=\"h4\" gutterBottom> Fundamental frequencies vs. spoken phoneme </Typography>\n                                        <Typography variant=\"body\"> Hover over the chart to see the phoneme spoken and what pitch it was spoken at </Typography>\n                                        <ResponsiveContainer width='100%' aspect={4.0/2.0}>\n                                        <AreaChart data={freqGraphData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <XAxis dataKey=\"phoneme\" hide={true}>\n                                                <Label value=\"Detected Phoneme\" offset={10} position=\"bottom\" />\n                                            </XAxis>\n                                            <YAxis label={{ value: 'Fundamental Frequency (hz)', angle: -90, position: 'insideLeft'}}/>\n                                            <Tooltip />\n                                            <Area type=\"monotone\" dataKey=\"freq\" stroke=\"#8884d8\" fill=\"#8884d8\" unit=\"hz\" activeDot={{ r: 8 }} />\n                                            <Area type=\"monotone\" dataKey=\"note\" stroke=\"#8884d8\" dot={false} />\n                                        </AreaChart>\n                                        </ResponsiveContainer>\n                                    </CardContent>\n                                </Card>\n                                \n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Comparision to Sample </Typography>\n                                        <ResponsiveContainer width='100%' aspect={4.0/2.0}>\n                                        <RadarChart data={compareGraphData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                                            <PolarGrid />\n                                            <PolarAngleAxis dataKey=\"category\" />\n                                            <PolarRadiusAxis />\n                                            <Tooltip />\n                                            <Radar name='accuracy' unit='%' dataKey='value' stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n                                        </RadarChart>\n                                        </ResponsiveContainer>\n                                    </CardContent>\n                                </Card>\n\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h2\" gutterBottom> Comparision to Sample </Typography>\n                                        <ExpansionPanel>\n\n                                        </ExpansionPanel>\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                            {/* words comparison */}\n                            {/* <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={yourCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Words you </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                            <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Words sample </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid> */}\n\n                            {/* phoneme comparison */}\n                            {/* <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={yourCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Phonemes you </Typography>\n                                        {this.state.segmentedPhonemes}\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                            <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Phonemes sample </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid> */}\n\n                            {/* pitch comparison */}\n                            {/* <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={yourCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Pitch you </Typography>\n                                        {this.state.noteProgression}\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                            <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Pitch sample </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid> */}\n\n                            {/* pacing comparison */}\n                            {/* <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={yourCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Pacing you </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid>\n                            <Grid item xs={12} md={6} style={{padding:\"0 30px 0 30px\"}}>\n                                <Card style={sampleCard}>\n                                    <CardContent>\n                                        <Typography variant=\"h4\"> Pacing sample </Typography>\n                                        content goes here\n                                    </CardContent>\n                                </Card>\n                            </Grid> */}\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </Layout>  \n    )}\n}\n\nexport default results"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAgBA;AACA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAtEA;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AA/GA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFA;;;;AApQA;AACA;AAsQA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}